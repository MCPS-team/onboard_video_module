import numpy as np
import threading
import time
import cv2

class FrameBuffer():
	"""docstring for FrameBuffer"""
	def __init__(self, size, path=""):
		super().__init__()
		self.buffer = []
		self.size = size
		self.path = path
		self.condition = threading.Condition()

	def __push(self, frame):
		self.buffer.append(frame)

	def __pop(self):
		self.buffer.pop(0)

	def add(self, frame):
		with self.condition:
			if len(self.buffer) > self.size:
				self.__pop()
			self.__push(frame)
		

	def __flush(self):
		self.buffer.clear()

	def poth_hole_detected(self):
		try:
			with self.condition:
				self.condition.wait()
				tmp_buffer = self.buffer
				self.tmp_buffer = []
		finally:
			self.condition.notifyAll()

		for f in self.buffer:
			cv2.imwrite("{}frame{}.png".format(self.path, time.time()), f)

		self.__flush()
		
def read_video():
	cap = cv2.VideoCapture('prova.mov')

	while(cap.isOpened()):
		ret, frame = cap.read()
		print ("frame red...")
		if ret==True:
			gray = cv2.cvtColor(frame, 0)

			video_buffer.add(frame)

			cv2.imshow('frame',gray)

			for _ in range(10):
				ret, frame = cap.read()

			else:
			break

	# Release everything if job is finished
	cap.release()
	cv2.destroyAllWindows()

def detect_pothole():
	video_buffer.poth_hole_detected()


video_buffer = FrameBuffer(20)


t1 = threading.Thread(name="reader", target = read_video)
print("reader started...")
t2 = threading.Thread(name="detector", target = detect_pothole)
t1.start()

while True:
	if cv2.waitKey(1) & 0xFF == ord('p'):
		t2.start()

	if cv2.waitKey(1) & 0xFF == ord('q'):
		t1.exit()
